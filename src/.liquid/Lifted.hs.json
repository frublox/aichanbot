{
    "status": "error",
    "types": {
        "13": {
            "15": {
                "ann": "forall a##xo . (GHC.Types.IO a##xo) -> b##xo a##xo",
                "ident": "_",
                "row": 13,
                "col": 15
            },
            "1": {
                "ann": "forall a##xo b##xo .\n(Control.Monad.IO.Class.MonadIO<[]> a##xo) =>\n(GHC.Conc.Sync.TVar b##xo) -> a##xo b##xo",
                "ident": "Lifted.readTVarIOL",
                "row": 13,
                "col": 1
            },
            "24": {
                "ann": "{VV : forall a##xo .\n      (GHC.Conc.Sync.TVar a##xo) -> (GHC.Types.IO a##xo) | VV == readTVarIO}",
                "ident": "_",
                "row": 13,
                "col": 24
            }
        },
        "1": {
            "1": {
                "ann": "GHC.Types.Module",
                "ident": "Lifted.$trModule",
                "row": 1,
                "col": 1
            }
        },
        "9": {
            "15": {
                "ann": "forall a##xo . (GHC.Types.IO a##xo) -> b##xo a##xo",
                "ident": "_",
                "row": 9,
                "col": 15
            },
            "1": {
                "ann": "forall a##xo b##xo .\n(Control.Monad.IO.Class.MonadIO<[]> a##xo) =>\n(GHC.Conc.Sync.STM b##xo) -> a##xo b##xo",
                "ident": "Lifted.atomicallyL",
                "row": 9,
                "col": 1
            },
            "24": {
                "ann": "{VV : forall a##xo .\n      (GHC.Conc.Sync.STM a##xo) -> (GHC.Types.IO a##xo) | VV == atomically}",
                "ident": "_",
                "row": 9,
                "col": 24
            }
        }
    },
    "sptypes": [
        {
            "start": {
                "line": 1,
                "column": 1
            },
            "ann": "GHC.Types.Module",
            "ident": "Lifted.$trModule",
            "stop": {
                "line": 1,
                "column": 1
            }
        },
        {
            "start": {
                "line": 9,
                "column": 1
            },
            "ann": "forall a##xo b##xo .\n(Control.Monad.IO.Class.MonadIO<[]> a##xo) =>\n(GHC.Conc.Sync.STM b##xo) -> a##xo b##xo",
            "ident": "Lifted.atomicallyL",
            "stop": {
                "line": 9,
                "column": 12
            }
        },
        {
            "start": {
                "line": 9,
                "column": 15
            },
            "ann": "forall a##xo . (GHC.Types.IO a##xo) -> b##xo a##xo",
            "ident": "_",
            "stop": {
                "line": 9,
                "column": 21
            }
        },
        {
            "start": {
                "line": 9,
                "column": 24
            },
            "ann": "{VV : forall a##xo .\n      (GHC.Conc.Sync.STM a##xo) -> (GHC.Types.IO a##xo) | VV == atomically}",
            "ident": "_",
            "stop": {
                "line": 9,
                "column": 34
            }
        },
        {
            "start": {
                "line": 13,
                "column": 1
            },
            "ann": "forall a##xo b##xo .\n(Control.Monad.IO.Class.MonadIO<[]> a##xo) =>\n(GHC.Conc.Sync.TVar b##xo) -> a##xo b##xo",
            "ident": "Lifted.readTVarIOL",
            "stop": {
                "line": 13,
                "column": 12
            }
        },
        {
            "start": {
                "line": 13,
                "column": 15
            },
            "ann": "forall a##xo . (GHC.Types.IO a##xo) -> b##xo a##xo",
            "ident": "_",
            "stop": {
                "line": 13,
                "column": 21
            }
        },
        {
            "start": {
                "line": 13,
                "column": 24
            },
            "ann": "{VV : forall a##xo .\n      (GHC.Conc.Sync.TVar a##xo) -> (GHC.Types.IO a##xo) | VV == readTVarIO}",
            "ident": "_",
            "stop": {
                "line": 13,
                "column": 34
            }
        }
    ],
    "errors": []
}